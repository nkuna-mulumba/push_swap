Dada a estrutura e funções que você já implementou no seu projeto push_swap, 
o Merge Sort seria uma escolha adequada para lidar tanto com listas pequenas 
quanto grandes de números.Vamos explorar por que o Merge Sort é uma boa opção 
e como ele pode se adaptar à sua estrutura atual.

Por Que Merge Sort?
1 Eficiência:
	Merge Sort tem uma complexidade de tempo garantida de (O(n \log n)), 
	o que o torna eficiente para grandes conjuntos de dados.
	Ele é estável, o que significa que mantém a ordem relativa 
	dos elementos iguais.

2 Divisão e Conquista:
	A abordagem de divisão e conquista do Merge Sort se adapta bem à 
	manipulação	de pilhas, já que você pode dividir a pilha em subpilhas 
	menores e ordená-las recursivamente.

3 Uso de Operações de Pilha:
	Você pode usar as operações de pilha que já implementou 
	(push, pop, swap, rotate) para dividir e combinar as subpilhas 
	durante o processo de ordenação.


### Adaptação do Merge Sort à Estrutura Atual ###
Para implementar o Merge Sort no contexto do push_swap, siga estas etapas:

1 Divisão da Pilha:
	Use a operação pb para mover elementos de stack_a para stack_b, 
	dividindo a pilha em duas subpilhas aproximadamente iguais.

2 Ordenação Recursiva das Subpilhas:
	Recursivamente aplique o Merge Sort às duas subpilhas resultantes.

3 Combinação das Subpilhas Ordenadas:
Use as operações de pilha (pa, pb, ra, rb, etc.) para combinar as subpilhas 
ordenadas de volta em uma única pilha ordenada.

### Passos de Implementação ###
1 Dividir a Pilha:
	Divida stack_a em duas subpilhas usando pb até que stack_a e stack_b 
	tenham aproximadamente o mesmo número de elementos.

2 Ordenar Recursivamente:
	Aplique recursivamente o Merge Sort às subpilhas stack_a e stack_b.

3 Combinar Subpilhas:
	Combine as subpilhas ordenadas de volta em stack_a usando pa e pb.


Embora o Merge Sort possa ser mais complexo de implementar em comparação 
com o Insertion Sort, ele é mais eficiente para conjuntos de dados maiores 
e pode lidar com listas de números de todos os tamanhos de maneira eficaz.

Conclusão
O Merge Sort é uma escolha robusta e eficiente para lidar com listas 
pequenas e grandes de números no seu projeto push_swap. Ele aproveita 
bem as operações de pilha que você já implementou e oferece um equilíbrio 
entre simplicidade e eficiência.